function savestruct = save_data(filepath, keywords, source, datafile, inputfile, leaveflag, deletecurrent, addallsubfolders)
%SAVE_DATA Saves the data generated by 'TS_compute' and 'find_correlation'
%   into a file for easier access. It must be run within a folder
%   containing:
%       - A file of hctsa data (default: hctsa.mat)
%       - A file containing the parameters used to generate the data
%       (default: inputs.mat)
%       - A file containing the correlations of features to the control
%       parameter, usually a matrix whose first column is the spearman
%       correlations of the features identified in the second column
%       (default: correlation.mat)
%   
%   'filepath' is the location in which the data will be saved (including
%   the file name and extension!). If no such file is present, one will be created
%
%   'keywords' is a comma delimited string containing keywords for the time
%   series data, with no white space
%
%   'source' is a string contianing the function, original location or the
%   method used to collect the time series
%
%   (optional) 'datafile' is a string naming the file containing hctsa data (default:
%   HCTSA.mat)
%
%   (optional) 'inputfile' is a string naming the file containing parameter data (default:
%   inputs.mat)
%
%   (optional) 'leaveflag' is a logical determining whether a flag is
%   left in the current folder to show it has already been added, and to
%   give the index in time_series_data of the current folder.
%
%   (optional) 'deletecurrent' is a logical specifying whether the
%   existing data file is to be deleted (default: false)
%
%   (optional) 'add_all_subfolders' 

    %% Checking inputs
    tic
    if nargin < 4 || isempty(datafile)
        datafile = 'HCTSA.mat';
    end
    if nargin < 5 || isempty(inputfile)
        inputfile = 'inputs.mat';
    end
    if nargin < 6 || isempty(leaveflag)
        leaveflag = true;
    end
    if nargin < 7 || isempty(deletecurrent)
        deletecurrent = false;
    end
    if nargin < 8 || isempty(addallsubfolders)
        addallsubfolders = 0;
    end
    
    
    %find_folder = which('save_data.m');
    %filepath = [find_folder(1:end-length('save_data.m')), filename];
    if ~isempty(filepath)
        filepath = fullfile(filepath);
        if deletecurrent && exist(filepath, 'file')
            delete(filepath)
        end
    end
    if nargin < 2 || isempty(source)
        source = 'Unknown';
    end
    
    %% Get subfolders  
    homedir = pwd;
    paths = regexp(genpath(homedir),['[^', pathsep, ']*'],'match');
    paths = paths(~contains(paths, [filesep, '.']));
    if addallsubfolders
        paths = paths(~strcmp(paths, homedir)); % Remove the current folder
    else
        paths = paths(strcmp(paths, homedir)); % Keep only the current folder
    end
    
    savestructcell = cell(length(paths), 1);
    
    for pathind = 1:length(paths)
        if ~exist(fullfile(paths{pathind}, datafile), 'file') || ~exist(fullfile(paths{pathind}, inputfile), 'file')
            error('One or more of the required files is missing')
        end
        if exist(fullfile(paths{pathind}, 'flag.mat'), 'file')
            error('This folder has already been added')
        end
        fprintf('------------------------Adding Folder %g------------------------\n', pathind)
        
        [TS_DataMat, TimeSeries, Operations] = TS_LoadData(fullfile(paths{pathind}, datafile));
        [~, opidxs] = sort(Operations.ID); % Sort Operations by ID
        Operations = Operations(opidxs, :);
        TS_DataMat = TS_DataMat(:, opidxs); % Sort datamat by moving columns
        [~, TSidxs] = sort(TimeSeries.ID);
        TS_DataMat = TS_DataMat(TSidxs, :); % Sort datamat by moving rows;
        [~, TSidxs] = sort(TimeSeries.ID);
        TS_DataMat = TS_DataMat(TSidxs, :); % Sort datamat by moving rows, in case distributed_hctsa reordered them;
        % TS_DataMat rows should remain in the order common to the cp_range
        % (Which should be in increasing cp_range order for each set of
        % timeseries)
        
        p = load(fullfile(paths{pathind}, inputfile));
        vars = fieldnames(p);
        inputs = p.(vars{1});
        temparameters = renameStructField(inputs, 'etarange', 'eta');

        if exist('m', 'var') && leaveflag
            flagid = nrows+1:nrows+length(inputs.etarange); % nrows loaded
            save(fullfile(paths{pathind}, 'flag.mat'), 'flagid')
        end

        savestruct = repmat(struct('TS_DataMat', [], 'Operations', Operations, ...
                'Correlation', [], 'Source', source, ...
                'Inputs', [], 'Date', date, 'Keywords', keywords, 'Correlation_Type', [], 'Correlation_Range', []), length(inputs.etarange), 1);

        for i = 1:length(inputs.etarange)
            %fprintf('------------------------%g%% complete, %gs elapsed------------------------\n', round(100*(i-1)./length(parameters.etarange)), round(toc))
            savestruct(i, 1).TS_DataMat = TS_DataMat(1+length(inputs.cp_range)*(i-1):length(inputs.cp_range)*i, :);
            temparameters.eta = inputs.etarange(i);
            savestruct(i, 1).Inputs = temparameters;
        end
        savestructcell{pathind} = savestruct;
    end
    
    if ~isempty(filepath) && ~exist(filepath, 'file')
        time_series_data = struct('TS_DataMat', {}, 'Operations', {}, 'Correlation', {}, 'Source', {}, 'Inputs', {}, 'Date', {}, 'Keywords', {}, 'Correlation_Type', {}, 'Correlation_Range', {});%, 'Feature_Value_Shift', {});
        nrows = 0;
        save(filepath, 'time_series_data', 'nrows', '-v7.3')
    end
    
    savestruct = cell2mat(savestructcell);
    if ~isempty(filepath)
        m = load(filepath); 
        oldnrows = m.nrows;
        nrows = oldnrows + size(savestruct, 1);

        if isempty(m.time_series_data)
            m.time_series_data = savestruct;
        else
            m.time_series_data(oldnrows+1:nrows, 1) = savestruct; % Need faster way to modify time_series_data
        end
        m.nrows = nrows;
        fprintf('------------------------Finished Loading, Saving Results------------------------\n')
        save(filepath, '-struct', 'm', '-v7.3', '-nocompression')
        savestruct = [];
    end
    %fprintf('------------------------100%% complete, %gs elapsed------------------------\n', round(toc))
end
